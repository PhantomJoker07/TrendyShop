@model TrendyShop.ViewModels.PaymentMethodViewModel

@{
    ViewData["Title"] = "GetPaymentMethod";
}

<div class="col-lg-5 mx-auto mt-4">
    <div class="card">
        <div class="card-body">
            <h1 class="card-title border-bottom">Complete su orden: </h1>
            @*@using (Html.BeginForm("EffectBuy", "Buy", new { aid = @Model.Add.ArticleId, uid = @Model.Add.UserId, card = @Model.Card, amountToBuy = @Model.AmountToBuy }))*@
            @using (Html.BeginForm("FinishPayment", "PaymentGateway", FormMethod.Post, new { id = "pform" }))
            {
                <h3>@*Añada una tarjeta para realizar el pago:*@</h3>

                <div class=" form-group">
                    @Html.LabelFor(m => m.NameOnCard)
                    @Html.TextBoxFor(m => m.NameOnCard, new { @class = "form-control"@*, @id = "cardName"*@ })
                    @Html.ValidationMessageFor(m => m.NameOnCard)
                </div>

                <div class=" form-group">
                    @Html.LabelFor(m => m.CardNumber)
                    @Html.TextBoxFor(m => m.CardNumber, new { @class = "form-control"@*, @id = "cardNumber"*@ })
                    @Html.ValidationMessageFor(m => m.CardNumber)
                </div>

                <h3>O escoja una de las registradas:</h3>

                //podemos actually tener un card que sea una clase con NameOnCard y CardNumber
                <div class=" form-group">
                    @Html.LabelFor(m => m.SelectedCardNumber)
                    @Html.DropDownListFor(m => m.SelectedCardNumber, new SelectList(Model.Cards, "CardNumber", "CardNumber"), "", new { @class = "form-control" })
                </div>

                @Html.HiddenFor(m => m.UserId)
                @*@Html.HiddenFor(m => m.SellerId)*@
                @Html.HiddenFor(m => m.ArticleId)
                @Html.HiddenFor(m => m.DateTicks)
                @Html.HiddenFor(m => m.Charge)
                @Html.HiddenFor(m => m.ForAuction)
            }


            <div class="d-flex">
                <button class="btn btn-secondary ml-auto" type="button" data-toggle="modal" data-target="#confirmodal">Realizar pago</button>
                <form asp-action="CancelOrder" asp-controller="Buy" asp-route-userId=@Model.UserId asp-route-articleId=@Model.ArticleId asp-route-dateTicks=@Model.DateTicks asp-route-forAuction=@Model.ForAuction>
                    <button class="btn btn-dark ml-1" type="submit">Cancelar</button>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="confirmodal" tabindex="-1" role="dialog" aria-labelledby="ConfirmationModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ConfirmationModalLongTitle">Confirmación de pago</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h6>Se descontará @Model.Charge de su cuenta. ¿Desea continuar?</h6>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary ml-auto" onclick="finishOperation()">Continuar</button>
                <button class="btn btn-dark ml-1" data-dismiss="modal">Cancelar</button>
            </div>
        </div>
    </div>
</div>

<script>
    var usedCards = []
    function insertData() {
        var isValid = validateForm();

        if (isValid) {
            $('#confirmodal').modal()
        }
    }

    function validateForm() {
        nameOnCard = document.getElementById("NameOnCard").value;
        cardNumber = document.getElementById("CardNumber").value;
        var dropDownList = document.getElementById("SelectedCardNumber");
        cardNumberDDL = dropDownList.options[dropDownList.selectedIndex].text;

        //cards most have from 13 - 18 digits
        if (cardNumberDDL != "" && (nameOnCard != "" || cardNumber != "")) {
            alert("Sólo puede elegir una tarjeta para realizar el pago.")
            return false;
        }
        if (cardNumberDDL == "" && nameOnCard == "" &&  cardNumber == "") {
            alert("Debe elegir una tarjeta para realizar el pago.")
            return false;
        }
        if (cardNumberDDL == "") {
            if (nameOnCard == "") {
                alert("Por favor especifique un nombre de tarjeta válido.");
                return false;
            }
            if (isNaN(cardNumber) || cardNumber.length < 13 || cardNumber.length > 18) {
                alert("Por favor especifique un número de tarjeta válido. Debe contener entre 13 y 18 dígitos.");
                return false;
            }
        }
        return true;
    }

    function finishOperation() {
        isValid = validateForm();

        if (isValid) {
            newCardNumber = document.getElementById("CardNumber").value;
            var dropDownList = document.getElementById("SelectedCardNumber");
            cardNumberDDL = dropDownList.options[dropDownList.selectedIndex].text;
            if (cardNumberDDL == "" && newCardNumber != "") {
                cardNumber = newCardNumber;
            }
            else {
                cardNumber = cardNumberDDL;
            }

            random = Math.floor((Math.random() * 10) + 1);

            if (random === 1 || usedCards.includes(cardNumber)) {
                if (!usedCards.includes(cardNumber)) {
                    usedCards.push(cardNumber);
                }
                alert("Lo sentimos, al parecer la tarjeta seleccionada no cuenta con fondos suficientes. Por favor seleccione otra.");
            }
            else {
                submitForm();
            }
        }
    }

    function submitForm() {
        document.getElementById('pform').submit();
    }
</script>