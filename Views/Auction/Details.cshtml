@using TrendyShop.ViewModels
@model AuctionViewModel
@using Microsoft.AspNetCore.Identity;
@inject SignInManager<User> SignInManager

<!DOCTYPE html>
<html lang="en">

<body>
    <!-- Page Content -->
    @{
        TimeSpan elapsed = DateTime.Now - Model.Start;
        TimeSpan remaining = Model.Duration - elapsed;
        if (elapsed > Model.Duration) remaining = new TimeSpan(0);
        string winner = "-";
        if (Model.Biders > 0)
        {
            winner = Model.LastBid.user.UserName;
        }
        int r_days = (int)(remaining.TotalDays);
        int r_hours = (int)(remaining.TotalHours) % 24;
        int r_minutes = (int)(remaining.TotalMinutes) % 60;
        int r_seconds = (int)(remaining.TotalSeconds) % 60;
    }
    <div class="col-lg-7 mx-auto mt-4">
        <div class="card">
            <div class="card-body">
                <h3 class="card-title border-bottom">@Model.Name</h3>

                <div class="d-flex">
                    <img src="~/images/@Model.Article.Image" class="img-fluid rounded" height="200" width="300" />
                    <div class=" ml-2 flex-column">

                        <h3>@Model.Article.Name</h3>
                        <p class="card-text">@Model.Article.Description</p>
                    </div>
                </div>
                <div class="d-flex mt-4">
                    @if (Model.IsFinished)
                    {
                        <p title="Fecha"><i class="far fa-calendar-check"></i> @Model.Start.ToString("dd/MM/yy")</p>
                    }
                    else
                    {
                        <p title="Fecha"><i class="far fa-calendar-alt"></i> @Model.Start.ToString("dd/MM/yy")</p>
                    }
                    <p title="Hora de inicio" class="ml-2"><i class="far fa-clock"></i> @Model.Start.ToString("hh:mm tt")</p>
                    <p title="Tiempo restante (días/horas/min/seg)" class="ml-2">
                        <i class="fas fa-hourglass-end"></i>
                        <div id="clockdiv">
                            <span class="days"></span>:
                            <span class="hours"></span>:
                            <span class="minutes"></span>:
                            <span class="seconds"></span>
                        </div>
                    </p>
                    <h5 title="Participantes" class="ml-2"><i class="fas fa-users"></i> @Model.Biders</h5>

                </div>
                @if (Model.IsFinished)
                {
                    <h5>Vendido a: @winner </h5>

                }
                else if (Model.HasStarted && !Model.IsFinished) /*---------Si está en curso---------*/
                {
                    <h5 class="mb-0">Licitador en cabeza: @winner </h5>
                }
                <div class="d-flex">
                    <h5 class="btn btn-secondary mt-0">Precio Inicial: @Model.Article.Price$</h5>
                    @if (Model.IsFinished) // si ya se terminó
                    {
                        <h5 class="ml-2 btn btn-secondary">Precio Final: @Model.Price$</h5>
                    }
                    else if (Model.HasStarted && !Model.IsFinished) /*---------Si está en curso---------*/
                    {
                        <h5 class="ml-2 btn btn-secondary mt-0">Precio Actual: @Model.LastBid.amount$</h5>
                    }

                </div>
                @if (SignInManager.IsSignedIn(User) && !Model.IsFinished && Model.HasStarted) //Only a logged user can participate
                {
                    <form asp-controller="Auction" asp-action="Bid" method="post">
                        <h5 class="text-lg-left">Cantidad:</h5>
                        <div class="d-flex">
                            <input type="text" asp-for="BidAmount" class=" form-control" id="submit" required data-validation-required-message="Por favor introduzca una cantidad.">
                            <span asp-validation-for="BidAmount" class="text-danger"></span>
                            <input type="text" asp-for="ArticleId" data="@Model.Id" id="submit" hidden /> @*NO BORRAR*@
                            <button type="submit" class="ml-2 bg-dark btn btn-dark">Pujar</button>
                            <div asp-validation-summary="All" class="col-lg-4 text-danger"></div>
                        </div>
                    </form>

                }
                @if (SignInManager.IsSignedIn(User) && Model.IsFinished) //For the winner only
                {
                    <form asp-controller="Auction" asp-action="Buy" method="post">
                        <div class="mb-4">
                            <input type="text" asp-for="ArticleId" data="@Model.Id" id="submit" hidden />
                            <button type="submit" class="bg-dark btn btn-dark">Finalizar Subasta</button>
                        </div>
                    </form>
                }
            </div>

        </div>
    </div>
</body>
</html>
<script>
    function getTimeRemaining(endtime) {
        const total = Date.parse(endtime) - Date.parse(new Date());
        const seconds = Math.floor((total / 1000) % 60);
        const minutes = Math.floor((total / 1000 / 60) % 60);
        const hours = Math.floor((total / (1000 * 60 * 60)) % 24);
        const days = Math.floor(total / (1000 * 60 * 60 * 24));

        return {
            total,
            days,
            hours,
            minutes,
            seconds
        };
    }

    function initializeClock(id, endtime) {
        const clock = document.getElementById(id);
        const daysSpan = clock.querySelector('.days');
        const hoursSpan = clock.querySelector('.hours');
        const minutesSpan = clock.querySelector('.minutes');
        const secondsSpan = clock.querySelector('.seconds');

        function updateClock() {
            const t = getTimeRemaining(endtime);

            daysSpan.innerHTML = t.days;
            hoursSpan.innerHTML = ('0' + t.hours).slice(-2);
            minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);
            secondsSpan.innerHTML = ('0' + t.seconds).slice(-2);

            if (t.total <= 0) {
                clearInterval(timeinterval);
            }
        }

        updateClock();
        const timeinterval = setInterval(updateClock, 1000);
    }

    const deadline = new Date( "@Model.Deadline");
    initializeClock('clockdiv', deadline);
</script>
